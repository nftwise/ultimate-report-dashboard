import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { format } from 'date-fns';

export interface ReportData {
  companyName: string;
  period: string;
  metrics: {
    totalSessions: number;
    adSpend: number;
    phoneCalls: number;
    totalConversions: number;
    costPerClick: number;
    costPerLead: number;
    avgCallDuration: number;
    callConversionRate: number;
  };
  trends?: {
    sessionsChange: number;
    spendChange: number;
    callsChange: number;
    conversionsChange: number;
  };
}

export async function generateDashboardPDF(data: ReportData): Promise<Blob> {
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;

  // Header
  pdf.setFillColor(37, 99, 235); // Blue color
  pdf.rect(0, 0, pageWidth, 40, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Marketing Analytics Report', margin, 25);
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Generated on ${format(new Date(), 'MMMM dd, yyyy')}`, margin, 33);

  // Company Info
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(18);
  pdf.setFont('helvetica', 'bold');
  pdf.text(data.companyName, margin, 60);
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Report Period: ${getPeriodText(data.period)}`, margin, 70);

  // Key Metrics Section
  let yPos = 90;
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Key Performance Metrics', margin, yPos);
  
  yPos += 15;
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  
  // Metrics in a table format
  const metrics = [
    { label: 'Total Sessions', value: formatNumber(data.metrics.totalSessions), icon: 'üë•' },
    { label: 'Ad Spend', value: formatCurrency(data.metrics.adSpend), icon: 'üí∞' },
    { label: 'Phone Calls', value: formatNumber(data.metrics.phoneCalls), icon: 'üìû' },
    { label: 'Total Conversions', value: formatNumber(data.metrics.totalConversions), icon: 'üéØ' },
    { label: 'Cost Per Click', value: formatCurrency(data.metrics.costPerClick), icon: 'üñ±Ô∏è' },
    { label: 'Cost Per Lead', value: formatCurrency(data.metrics.costPerLead), icon: 'üìà' },
    { label: 'Avg Call Duration', value: formatDuration(data.metrics.avgCallDuration), icon: '‚è±Ô∏è' },
    { label: 'Call Conversion Rate', value: `${data.metrics.callConversionRate.toFixed(1)}%`, icon: 'üìû' },
  ];

  const itemsPerRow = 2;
  const itemWidth = (pageWidth - 2 * margin - 10) / itemsPerRow;
  const itemHeight = 25;

  metrics.forEach((metric, index) => {
    const row = Math.floor(index / itemsPerRow);
    const col = index % itemsPerRow;
    const x = margin + col * (itemWidth + 5);
    const y = yPos + row * itemHeight;

    // Background box
    pdf.setFillColor(248, 250, 252);
    pdf.setDrawColor(226, 232, 240);
    pdf.rect(x, y, itemWidth, itemHeight - 5, 'FD');

    // Icon and label
    pdf.setTextColor(71, 85, 105);
    pdf.setFontSize(10);
    pdf.text(`${metric.icon} ${metric.label}`, x + 5, y + 8);
    
    // Value
    pdf.setTextColor(15, 23, 42);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text(metric.value, x + 5, y + 16);
    pdf.setFont('helvetica', 'normal');
  });

  // Trends Section (if available)
  yPos += Math.ceil(metrics.length / itemsPerRow) * itemHeight + 20;
  
  if (data.trends && yPos < pageHeight - 100) {
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Performance Trends', margin, yPos);
    
    yPos += 15;
    pdf.setFontSize(11);
    
    const trends = [
      { label: 'Sessions', change: data.trends.sessionsChange },
      { label: 'Ad Spend', change: data.trends.spendChange },
      { label: 'Phone Calls', change: data.trends.callsChange },
      { label: 'Conversions', change: data.trends.conversionsChange },
    ];

    trends.forEach((trend, index) => {
      const isPositive = trend.change > 0;
      const arrow = isPositive ? '‚ÜóÔ∏è' : trend.change < 0 ? '‚ÜòÔ∏è' : '‚û°Ô∏è';
      const color: [number, number, number] = isPositive ? [34, 197, 94] : trend.change < 0 ? [239, 68, 68] : [107, 114, 128];
      
      pdf.setTextColor(...color);
      pdf.text(`${arrow} ${trend.label}: ${trend.change > 0 ? '+' : ''}${trend.change.toFixed(1)}%`, 
        margin, yPos + index * 12);
    });
  }

  // Footer
  pdf.setTextColor(107, 114, 128);
  pdf.setFontSize(8);
  pdf.text('Generated by Ultimate Reporting Dashboard', 
    margin, pageHeight - 15);
  pdf.text(`Report ID: ${Date.now()}`, 
    pageWidth - margin - 30, pageHeight - 15);

  // Return PDF as blob
  return pdf.output('blob');
}

export async function exportElementAsPDF(
  elementId: string, 
  filename: string = 'dashboard-export.pdf'
): Promise<void> {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error(`Element with ID "${elementId}" not found`);
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: false,
    backgroundColor: '#ffffff',
  });

  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF({
    orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const imgWidth = pageWidth - 20; // 10mm margin on each side
  const imgHeight = (canvas.height * imgWidth) / canvas.width;

  let heightLeft = imgHeight;
  let position = 10; // Top margin

  // Add first page
  pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
  heightLeft -= pageHeight - 20; // Account for margins

  // Add additional pages if content is too long
  while (heightLeft >= 0) {
    position = heightLeft - imgHeight + 10;
    pdf.addPage();
    pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
    heightLeft -= pageHeight - 20;
  }

  pdf.save(filename);
}

function formatCurrency(value: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(value);
}

function formatNumber(value: number): string {
  return new Intl.NumberFormat('en-US').format(value);
}

function formatDuration(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}m ${secs}s`;
}

function getPeriodText(period: string): string {
  switch (period) {
    case 'today':
      return 'Today';
    case '7days':
      return 'Last 7 Days';
    case '30days':
      return 'Last 30 Days';
    case '90days':
      return 'Last 90 Days';
    default:
      return period;
  }
}
